service:
  name: sls-saas-tenant

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-stage-manager
  # - serverless-domain-manager 
  - serverless-package-external
  - serverless-pseudo-parameters

custom:
  relativePathToCommon: "../common"
  packageExternal:
    external:
      - ${self:custom.relativePathToCommon}
  stages:
    - dev
    - staging
    - prod

  env: ${file(${self:custom.relativePathToCommon}/config-manager/env.yml)}
  prefix: ${file(${self:custom.relativePathToCommon}/config-manager/prefix.yml)}
  # customDomain:
    # domainName: <registered_domain_name>
    # basePath: 'tenant'
    # stage: ${self:provider.stage}
    # createRoute53Record: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  profile: default
  region: ${opt:region, 'us-east-1'}
  apiKeys:
    - tenantApiKey
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvoqueFunction"
      Resource: "*"

  environment:
    SERVICE_URL: ${self:custom.env.serviceUrl.${self:provider.stage}}
    REGION: ${self:provider.region}
    SNS_ROLE_ARN: ${self:custom.prefix.arn.sns}:${self:custom.env.snsTopic.${self:provider.stage}}
    AWS_ACCOUNT_ID: ${self:custom.env.${self:provider.stage}.accountId}
    ENV: ${self:provider.stage}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          method: get
          path: reg
          authorizer: ${self:custom.prefix.arn.lambda}:${self:custom.env.authorizer.${self:provider.stage}}