app: sls-saas-user
service:
  name: sls-saas-user

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-stage-manager
  - serverless-domain-manager
  - serverless-package-external
  - serverless-pseudo-parameters

custom:
  PROJECT_NAME: "sls-saas"
  relativePathToCommon: "../common"
  packageExternal:
    external:
      - ${self:custom.relativePathToCommon}
  stages:
    - dev
    - staging
    - prod

  env: ${file(${self:custom.relativePathToCommon}/config-manager/env.yml)}
  prefix: ${file(${self:custom.relativePathToCommon}/config-manager/prefix.yml)}
  customDomain:
    basePath: users
    domainName: ${self:custom.env.serviceUrl.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  profile: default
  region: ${opt:region, 'us-east-1'}
  apiKeys:
    - userApiKey
  iamRoleStatements:
    # allow lambda invocation and request
    - Effect: "Allow"
      Action:
        - "lambda:InvoqueFunction"
      Resource: "*"
    # allow access dynamoDB base tenant
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "${self:custom.prefix.arn.table}/*"

  environment:
    PROJECT_NAME: ${self:custom.PROJECT_NAME}
    SERVICE_URL: ${self:custom.env.serviceUrl.${self:provider.stage}}
    REGION: ${self:provider.region}
    SNS_ROLE_ARN: ${self:custom.prefix.arn.sns}:${self:custom.env.snsTopic.${self:provider.stage}}
    AWS_ACCOUNT_ID: ${self:custom.env.accountId.${self:provider.stage}}
    ENV: ${self:provider.stage}
    USER_TABLE: ${self:custom.env.table.user.${self:provider.stage}}
    TENANT_TABLE: ${self:custom.env.table.tenant.${self:provider.stage}}

functions:
  getUserPool:
    handler: handler.getUserPool
    events:
      - http:
          method: get
          path: pool/{id}
  createUserSystem:
    handler: handler.createUserSystem
    events:
      - http:
          method: post
          path: system

  delUserTenants:
    handler: handler.delUserTenants
    events:
      - http:
          method: delete
          path: tenants
