service:
  name: sls-saas-system

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-stage-manager
  - serverless-domain-manager
  - serverless-package-external
  - serverless-pseudo-parameters

custom:
  PROJECT_NAME: "sls-saas"
  relativePathToCommon: "../common"
  packageExternal:
    external:
      - ${self:custom.relativePathToCommon}
  stages:
    - dev
    - staging
    - prod

  env: ${file(${self:custom.relativePathToCommon}/config-manager/env.yml)}
  prefix: ${file(${self:custom.relativePathToCommon}/config-manager/prefix.yml)}
  customDomain:
    basePath: sys
    domainName: ${self:custom.env.serviceUrl.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs12.x
#  vpc:
#    securityGroupIds:
#      - "Fn::GetAtt": SaaSSecurityGroup.GroupId
#    subnetIds:
#      - Ref: PrivateSubnetA
#      - Ref: PrivateSubnetB
#      - Ref: PublicSubnetA
#  vpc:
#    securityGroupIds:
#      - ${self:custom.env.vpc.securityGroupId.${self:provider.stage}}
#    subnetIds:
#      ${self:custom.env.vpc.subnetIds.${self:provider.stage}}
  stage: ${opt:stage, 'dev'}
  profile: smarly
  timeout: 15
  region: ${opt:region, 'us-east-1'}
  apiKeys:
    - systemApiKey
  iamRoleStatements:
    # allow lambda invocation and request
    - Effect: "Allow"
      Action:
        - "lambda:InvoqueFunction"
      Resource: "*"
    # allow access dynamoDB base tenant
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "${self:custom.prefix.arn.table}/*"
        - "${self:custom.prefix.arn.sns}:${self:custom.env.snsTopic.${self:provider.stage}}"
    - Effect: "Allow"
      Action:
        - iam:*
        - s3:*
        - cognito-idp:*
        - cognito-sync:*
        - cognito-identity:*
      Resource: "*"

  environment:
    PROJECT_NAME: ${self:custom.PROJECT_NAME}
    SERVICE_URL: ${self:custom.env.serviceUrl.${self:provider.stage}}
    REGION: ${self:provider.region}
    SNS_ROLE_ARN: ${self:custom.prefix.arn.sns}:${self:custom.env.snsTopic.${self:provider.stage}}
    AWS_ACCOUNT_ID: ${self:custom.env.accountId.${self:provider.stage}}
    NODE_ENVI: ${self:provider.stage}
    USER_TABLE: ${self:custom.env.table.user.${self:provider.stage}}
    TENANT_TABLE: ${self:custom.env.table.tenant.${self:provider.stage}}
    DB_NAME: ${self:custom.env.database.${self:provider.stage}.name}
    DB_USER: ${self:custom.env.database.${self:provider.stage}.user}
    DB_PASSWORD: ${self:custom.env.database.${self:provider.stage}.password}
    DB_HOST: ${self:custom.env.database.${self:provider.stage}.host}
    DB_PORT: ${self:custom.env.database.${self:provider.stage}.port}

functions:
  regSystemAdmin:
    handler: handler.regSystemAdmin
    events:
      - http:
          method: post
          path: admin
          cors:
            origin: "*"

  delSystemAdmin:
    handler: handler.delSystemAdmin
    events:
      - http:
          method: delete
          path: admin
          cors:
            origin: "*"


# create our resources with separate cloudFormation Templates
resources:
  # User Table
  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/dynamodb-user.yml)}

  # Tenant Table
  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/dynamodb-tenant.yml)}

  # SNS Topic
  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/sns-topic.yml)}

  # Roles
  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/roles.yml)}

##  # API Gateway Errors and CORS
#  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/api-gateway-errors.yml)}

#  # VPC
#  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/vpc.yml)}

#  # route tables and gateways
#  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/route-tables-gateway.yml)}

#  # groups
#  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/groups.yml)}

#  # elasticcache
#  - ${file(${self:custom.relativePathToCommon}/config-manager/resources/elasticache.yml)}
